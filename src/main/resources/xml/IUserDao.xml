<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.mt.dao.IUserDao">
    <cache/>

    <resultMap id="userMap" type="cn.mt.models.User">
        <id property="id" column="id"></id>
        <result property="username" column="username"/>
        <result property="loginTime" column="login_time"/>
    </resultMap>

    <select id="findAll" resultMap="userMap">
        select * from user
    </select>

    <insert id="saveUser" parameterType="user">
        <selectKey keyProperty="id" resultType="long" keyColumn="id" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into user(username,sex,address,birthday)values(#{username},#{sex},#{address},#{birthday})
    </insert>

    <update id="updateUser" parameterType="user">
        update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}
    </update>

    <delete id="deleteById" parameterType="LONG">
        delete from user where id=#{uid}
    </delete>

    <!--一级缓存是指同一个SqlSession只做查询的共同持有的缓存,任何更新删除新增，commit,close都会清空缓存-->
    <!--使用二级缓存，同一个SqlSessionFactory创建的SqlSession共同持有的缓存,只存了数据，不存对象，类似只存了json形式的数据-->
    <select id="findUserById" parameterType="long" resultMap="userMap" useCache="true">
        select * from user where id = #{id}
    </select>

    <select id="findLikeName" parameterType="string" resultMap="userMap">
        select * from user where username like #{likeName}
    </select>

    <select id="findTotal" resultType="integer">
        select count(*) from user
    </select>

    <!--根据QueryVo查询-->
    <select id="findUserByVo" resultMap="userMap" parameterType="cn.mt.vo.UserQueryVo">
        select * from user where username like #{user.username}
    </select>

    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>


    <select id="findUserByIds" resultMap="userMap" parameterType="cn.mt.vo.UserQueryVo">
        select * from user
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" item="id" open="and id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>